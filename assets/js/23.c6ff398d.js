(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{615:function(t,a,e){"use strict";e.r(a);var s=e(17),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("Javascript是一种基于对象（object-based）的语言，你遇到的所有东西几乎都是对象。但是，它又不是一种真正的面向对象编程（OOP）语言，因为它的语法中没有"),e("code",[t._v("class")]),t._v("（类）。")]),t._v(" "),e("p",[t._v('那么，如果我们要把"属性"（property）和"方法"（method），封装成一个对象，甚至要从原型对象生成一个实例对象，我们应该怎么做呢？')]),t._v(" "),e("h2",{attrs:{id:"生成实例对象的原始模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生成实例对象的原始模式"}},[t._v("#")]),t._v(" "),e("strong",[t._v("生成实例对象的原始模式")])]),t._v(" "),e("p",[e("strong",[t._v("一、 生成实例对象的原始模式")])]),t._v(" "),e("p",[t._v('假定我们把猫看成一个对象，它有"名字"和"颜色"两个属性。')]),t._v(" "),e("blockquote",[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("　　var Cat = {\n\n　　　　name : '',\n\n　　　　color : ''\n\n　　}\n")])])])]),t._v(" "),e("p",[t._v("现在，我们需要根据这个原型对象的规格（schema），生成两个实例对象。")]),t._v(" "),e("blockquote",[e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("　　"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" cat1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个空对象")]),t._v("\n\n　　　　cat1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"大毛"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 按照原型对象的属性赋值")]),t._v("\n\n　　　　cat1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("color "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"黄色"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n　　"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" cat2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n　　　　cat2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"二毛"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n　　　　cat2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("color "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"黑色"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),e("p",[t._v("好了，这就是最简单的封装了，把两个属性封装在一个对象里面。但是，这样的写法有两个缺点，一是如果多生成几个实例，写起来就非常麻烦；二是实例与原型之间，没有任何办法，可以看出有什么联系。")]),t._v(" "),e("p",[e("strong",[t._v("二、 原始模式的改进")])]),t._v(" "),e("p",[t._v("我们可以写一个函数，解决代码重复的问题。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('　　function Cat(name,color) {\n\n　　　　return {\n\n　　　　　　name:name,\n\n　　　　　　color:color\n\n　　　　}\n\n　　}\n　　var cat1 = Cat("大毛","黄色");\n\n　　var cat2 = Cat("二毛","黑色");\n')])])]),e("p",[t._v("这种方法的问题依然是，"),e("code",[t._v("cat1")]),t._v("和"),e("code",[t._v("cat2")]),t._v("之间没有内在的联系，不能反映出它们是同一个原型对象的实例。")]),t._v(" "),e("p",[e("strong",[t._v("三、 构造函数模式")])]),t._v(" "),e("p",[t._v("为了解决从原型对象生成实例的问题，Javascript提供了一个构造函数（Constructor）模式。")]),t._v(" "),e("p",[t._v('所谓"构造函数"，其实就是一个普通函数，但是内部使用了'),e("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("this")]),t._v("变量"),e("OutboundLink")],1),t._v("。对构造函数使用"),e("code",[t._v("new")]),t._v("运算符，就能生成实例，并且"),e("code",[t._v("this")]),t._v("变量会绑定在实例对象上。")]),t._v(" "),e("p",[t._v("比如，猫的原型对象现在可以这样写，")]),t._v(" "),e("blockquote",[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("　　function Cat(name,color){\n\n　　　　this.name=name;\n\n　　　　this.color=color;\n\n　　}\n")])])])]),t._v(" "),e("p",[t._v("我们现在就可以生成实例对象了。")]),t._v(" "),e("blockquote",[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('　　var cat1 = new Cat("大毛","黄色");\n\n　　var cat2 = new Cat("二毛","黑色");\n\n　　alert(cat1.name); // 大毛\n\n　　alert(cat1.color); // 黄色\n')])])])]),t._v(" "),e("p",[t._v("这时"),e("code",[t._v("cat1")]),t._v("和"),e("code",[t._v("cat2")]),t._v("会自动含有一个"),e("code",[t._v("constructor")]),t._v("属性，指向它们的构造函数。")]),t._v(" "),e("blockquote",[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("　　alert(cat1.constructor == Cat); //true\n\n　　alert(cat2.constructor == Cat); //true\n")])])])]),t._v(" "),e("p",[t._v("Javascript还提供了一个"),e("code",[t._v("instanceof")]),t._v("运算符，验证原型对象与实例对象之间的关系。")]),t._v(" "),e("blockquote",[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("　　alert(cat1 instanceof Cat); //true\n\n　　alert(cat2 instanceof Cat); //true\n")])])])]),t._v(" "),e("p",[e("strong",[t._v("四、构造函数模式的问题")])]),t._v(" "),e("p",[t._v("构造函数方法很好用，但是存在一个"),e("strong",[t._v("浪费内存")]),t._v("的问题。")]),t._v(" "),e("p",[t._v("请看，我们现在为"),e("code",[t._v("Cat")]),t._v("对象添加一个不变的属性"),e("code",[t._v("type")]),t._v("（种类），再添加一个方法"),e("code",[t._v("eat")]),t._v("（吃）。那么，原型对象"),e("code",[t._v("Cat")]),t._v("就变成了下面这样：")]),t._v(" "),e("blockquote",[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('　　function Cat(name,color){\n\n　　　　this.name = name;\n\n　　　　this.color = color;\n\n　　　　this.type = "猫科动物";\n\n　　　　this.eat = function(){alert("吃老鼠");};\n\n　　}\n')])])])]),t._v(" "),e("p",[t._v("还是采用同样的方法，生成实例：")]),t._v(" "),e("blockquote",[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('　　var cat1 = new Cat("大毛","黄色");\n\n　　var cat2 = new Cat ("二毛","黑色");\n\n　　alert(cat1.type); // 猫科动物\n\n　　cat1.eat(); // 吃老鼠\n')])])])]),t._v(" "),e("p",[t._v("表面上好像没什么问题，但是实际上这样做，有一个很大的弊端。那就是对于每一个实例对象，"),e("code",[t._v("type")]),t._v("属性和"),e("code",[t._v("eat()")]),t._v("方法都是一模一样的内容，每一次生成一个实例，都必须为重复的内容，多占用一些内存。这样既不环保，也缺乏效率。")]),t._v(" "),e("blockquote",[e("p"),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("　alert(cat1.eat == cat2.eat); //false\n")])])])]),t._v(" "),e("p",[t._v("能不能让"),e("code",[t._v("type")]),t._v("属性和"),e("code",[t._v("eat()")]),t._v("方法在内存中只生成一次，然后所有实例都指向那个内存地址呢？回答是可以的。")]),t._v(" "),e("p",[e("strong",[t._v("五、 Prototype模式")])]),t._v(" "),e("p",[t._v("Javascript规定，每一个构造函数都有一个"),e("code",[t._v("prototype")]),t._v("属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。")]),t._v(" "),e("p",[t._v("这意味着，我们可以把那些不变的属性和方法，直接定义在"),e("code",[t._v("prototype")]),t._v("对象上。")]),t._v(" "),e("blockquote",[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('　　function Cat(name,color){\n\n　　　　this.name = name;\n\n　　　　this.color = color;\n\n　　}\n\n　　Cat.prototype.type = "猫科动物";\n\n　　Cat.prototype.eat = function(){alert("吃老鼠")};\n')])])])]),t._v(" "),e("p",[t._v("然后，生成实例。")]),t._v(" "),e("blockquote",[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('　　var cat1 = new Cat("大毛","黄色");\n\n　　var cat2 = new Cat("二毛","黑色");\n\n　　alert(cat1.type); // 猫科动物\n\n　　cat1.eat(); // 吃老鼠\n')])])])]),t._v(" "),e("p",[t._v("这时所有实例的"),e("code",[t._v("type")]),t._v("属性和"),e("code",[t._v("eat()")]),t._v("方法，其实都是同一个内存地址，指向"),e("code",[t._v("prototype")]),t._v("对象，因此就提高了运行效率。")]),t._v(" "),e("blockquote",[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("　　alert(cat1.eat == cat2.eat); //true\n")])])])]),t._v(" "),e("p",[e("strong",[t._v("六、 Prototype模式的验证方法")])]),t._v(" "),e("p",[t._v("为了配合"),e("code",[t._v("prototype")]),t._v("属性，Javascript定义了一些辅助方法，帮助我们使用它。，")]),t._v(" "),e("p",[e("strong",[t._v("6.1 isPrototypeOf()")])]),t._v(" "),e("p",[t._v("这个方法用来判断，某个"),e("code",[t._v("proptotype")]),t._v("对象和某个实例之间的关系。")]),t._v(" "),e("blockquote",[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("　　alert(Cat.prototype.isPrototypeOf(cat1)); //true\n\n　　alert(Cat.prototype.isPrototypeOf(cat2)); //true\n")])])])]),t._v(" "),e("p",[e("strong",[t._v("6.2 hasOwnProperty()")])]),t._v(" "),e("p",[t._v("每个实例对象都有一个"),e("code",[t._v("hasOwnProperty()")]),t._v("方法，用来判断某一个属性到底是本地属性，还是继承自"),e("code",[t._v("prototype")]),t._v("对象的属性。")]),t._v(" "),e("blockquote",[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('　　alert(cat1.hasOwnProperty("name")); // true\n\n　　alert(cat1.hasOwnProperty("type")); // false\n')])])])]),t._v(" "),e("p",[e("strong",[t._v("6.3 in运算符")])]),t._v(" "),e("p",[e("code",[t._v("in")]),t._v("运算符可以用来判断，某个实例是否含有某个属性，不管是不是本地属性。")]),t._v(" "),e("blockquote",[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('　　alert("name" in cat1); // true\n\n　　alert("type" in cat1); // true\n')])])])]),t._v(" "),e("p",[e("code",[t._v("in")]),t._v("运算符还可以用来遍历某个对象的所有属性。")]),t._v(" "),e("blockquote",[e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("　"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" prop "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" cat1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cat1["')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("prop"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"]="')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("cat1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("prop"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_encapsulation.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("来源"),e("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);