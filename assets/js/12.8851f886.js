(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{603:function(e,a,t){"use strict";t.r(a);var s=t(17),p=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Monorepo 是管理项目代码的方式之一，指在一个大的项目仓库（repo）中 管理多个模块/包（package），这种类型的项目大都在项目根目录下有一个 packages 文件夹，分多个项目管理。大概结构如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("├── packages\n|   ├── pkg1\n|   |   ├── package.json\n|   ├── pkg2\n|   |   ├── package.json\n├── package.json\n")])])]),t("ul",[t("li",[e._v("Monorepo 的好处在哪里嘞？")])]),e._v(" "),t("ol",[t("li",[t("code",[e._v("统一管理")]),e._v(" 比如微前端项目，多个子应用可以放在同一个 monorepo 中方便管理；后端用 node.js 的项目放在 monorepo 中也可以使用同一套技术栈管理。在 CI/CD 等流水线过程中，方便统一迭代或升级版本，也方便做通用化的配置，适用到多个子项目当中。")]),e._v(" "),t("li",[t("code",[e._v("依赖提升。")]),e._v("如果多个项目都依赖了诸如 react、vue 或 TypeScript 等常用库，那可以通过 lerna 或者 yarn workspace 将依赖提升到最外层，多个子模块/包复用同一个依赖，减小项目体积")])]),e._v(" "),t("ul",[t("li",[e._v("如何实现 Monorepo")])]),e._v(" "),t("ol",[t("li",[e._v("pnpm")]),e._v(" "),t("li",[e._v("lerna")]),e._v(" "),t("li",[e._v("等等")])]),e._v(" "),t("h2",{attrs:{id:"pnpm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pnpm"}},[e._v("#")]),e._v(" pnpm")]),e._v(" "),t("p",[e._v("包管理工具")]),e._v(" "),t("h3",{attrs:{id:"快速开始"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#快速开始"}},[e._v("#")]),e._v(" 快速开始")]),e._v(" "),t("p",[e._v("先全局安装一个 pnpm，然后通过：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("pnpm init\n")])])]),t("p",[e._v("创建一个项目——在本例中，我们实现一个前后端分离、共同管理的 demo。")]),e._v(" "),t("p",[e._v("首先，我们需要理解 pnpm 中的工作区，在 pnpm 中可以通过创建并配置 pnpm-workspace.yaml 设置 workspace：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("packages:\n  - 'packages/**'\n")])])]),t("p",[e._v("接下来，我们就按照配置，创建 packages 文件夹，并在其目录中创建三个子项目，分别是：web 端、server 端和 http。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n├── packages\n│   ├── server\n│   ├── http\n│   └── web\n")])])]),t("h3",{attrs:{id:"全局依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全局依赖"}},[e._v("#")]),e._v(" 全局依赖")]),e._v(" "),t("ul",[t("li",[e._v("我们知道不管是一个 web 项目还是一个 server 项目，它都是基于同一种语言编写，所以我们可以只安装一次 TypeScript，供三个项目使用，这就体现出了 monorepo 的优势。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("pnpm install typescript // × 会报错问你是不是需要安装到根目录的文件，需要的话使用-w(--workspace-root)\npnpm install typescript -D √\npnpm install typescript -D -w √\n")])])]),t("p",[e._v("这里的-D 指令，就是把依赖作为 devDependencies 安装；而-W 就是把依赖安装到根目录的 node_modules 当中")]),e._v(" "),t("h3",{attrs:{id:"安装局部依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装局部依赖"}},[e._v("#")]),e._v(" 安装局部依赖")]),e._v(" "),t("p",[e._v("参照 pnpm 官网提供了根目录执行的命令 首先切到指定包 http 进行"),t("code",[e._v("pnpm init")]),e._v("初始化,包名一般都通用为命名空间+项目名，这里命名为@monorepo/http,必须要命名，不然 pnpm add --filter 的时候找不到添加包的项目目录\n对于局部依赖，最简单的办法就是 cd packages/http")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("pnpm install axios\n")])])]),t("p",[e._v("但这样重复操作多次未免有些麻烦，pnpm 提供了一个快捷指令——filter\n比如我们只在 web 应用中用到 vue，那就可以为它单独安装。首先要拿到它的 package name，这个是我们在子项目中自定义的，通常是”@命名空间+包名@“的方式，比如@vite/xx 或@babel/xx，在本例中，我们都以@panda 开头。那么命令如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("pnpm install vue -r --filter @monorepo/web\n")])])]),t("h3",{attrs:{id:"link-机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#link-机制"}},[e._v("#")]),e._v(" link 机制")]),e._v(" "),t("p",[e._v("在 monorepo 中，我们往往需要 package 间的引用，比如本例中的@monorepo/http 就会被@monorepo/server 和@monorepo/web 依赖。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("pnpm i @monorepo/http -r --filter @monorepo/server @monorepo/web\n")])])]),t("p",[e._v("在执行前，我们可以添加一个函数，比如：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// http/index.ts\nexport const getNow = () => (new Date().getTime());\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// server/index.ts\nimport { getNow } from "@monorepo/http";\n\nconsole.log(getNow());\n\n')])])])])}),[],!1,null,null,null);a.default=p.exports}}]);